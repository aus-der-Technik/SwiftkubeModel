//
// Copyright 2020 Iskandar Abudiab (iabudiab.dev)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.18.9
/// meta.v1.APIGroup
///

import Foundation

public extension meta.v1 {

	///
	/// APIGroup contains the name, the supported versions, and the preferred version of a group.
	///
	struct APIGroup: KubernetesResource, KubernetesAPIResource {
		///
		/// APIVersion of this Kubernetes API Resource.
		///
		public static let apiVersion: APIVersion = .coreV1
		///
		/// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
		///
		public let apiVersion: String = "v1"
		///
		/// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
		///
		public let kind: String = "APIGroup"
		///
		/// name is the name of the group.
		///
		public var name: String
		///
		/// preferredVersion is the version preferred by the API server, which probably is the storage version.
		///
		public var preferredVersion: meta.v1.GroupVersionForDiscovery?
		///
		/// a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.
		///
		public var serverAddressByClientCIDRs: [meta.v1.ServerAddressByClientCIDR]?
		///
		/// versions are the versions supported in this group.
		///
		public var versions: [meta.v1.GroupVersionForDiscovery]
		///
		/// Default memberwise initializer
		///
		public init(
			name: String,
			preferredVersion: meta.v1.GroupVersionForDiscovery? = nil,
			serverAddressByClientCIDRs: [meta.v1.ServerAddressByClientCIDR]? = nil,
			versions: [meta.v1.GroupVersionForDiscovery]
		) {
			self.name = name
			self.preferredVersion = preferredVersion
			self.serverAddressByClientCIDRs = serverAddressByClientCIDRs
			self.versions = versions
		}
	}
}

///
/// Codable conformance
///
extension meta.v1.APIGroup {

	private enum CodingKeys: String, CodingKey {
		case name = "name"
		case preferredVersion = "preferredVersion"
		case serverAddressByClientCIDRs = "serverAddressByClientCIDRs"
		case versions = "versions"
	}

}

