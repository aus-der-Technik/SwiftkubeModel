//
// Copyright 2020 Iskandar Abudiab (iabudiab.dev)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.18.9
///

import Foundation

public struct AnyKubernetesAPIResourceList: KubernetesResourceList {

	private enum CodingKeys: String, CodingKey {
		case apiVersion
		case kind
		case metadata
		case items
	}

	public let apiVersion: String
	public let kind: String
	public var metadata: meta.v1.ListMeta?
	public var items: [AnyKubernetesAPIResource]

	public init(
		apiVersion: String,
		kind: String,
		metadata: meta.v1.ListMeta?,
		items: [AnyKubernetesAPIResource]
	) {
		self.apiVersion = apiVersion
		self.kind = kind
		self.metadata = metadata
		self.items = items
	}
	
	public init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		let apiVersion = try container.decode(String.self, forKey: .apiVersion)
		let kind = try container.decode(String.self, forKey: .kind)
		let metadata = try container.decodeIfPresent(meta.v1.ListMeta.self, forKey: .metadata)
		let items = try container.decode([AnyKubernetesAPIResource].self, forKey: CodingKeys.items)

		self.init(apiVersion: apiVersion, kind: kind, metadata: metadata, items: items)
	}
}
