//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.18.13
/// auditregistration.v1alpha1.Webhook
///

import Foundation

public extension auditregistration.v1alpha1 {

	///
	/// Webhook holds the configuration of the webhook
	///
	struct Webhook: KubernetesResource {
		///
		/// ClientConfig holds the connection parameters for the webhook required
		///
		public var clientConfig: auditregistration.v1alpha1.WebhookClientConfig
		///
		/// Throttle holds the options for throttling the webhook
		///
		public var throttle: auditregistration.v1alpha1.WebhookThrottleConfig?
		///
		/// Default memberwise initializer
		///
		public init(
			clientConfig: auditregistration.v1alpha1.WebhookClientConfig,
			throttle: auditregistration.v1alpha1.WebhookThrottleConfig? = nil
		) {
			self.clientConfig = clientConfig
			self.throttle = throttle
		}
	}
}

///
/// Codable conformance
///
extension auditregistration.v1alpha1.Webhook {

	private enum CodingKeys: String, CodingKey {

		case clientConfig = "clientConfig"
		case throttle = "throttle"
	}

	public init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.clientConfig = try container.decode(auditregistration.v1alpha1.WebhookClientConfig.self, forKey: .clientConfig)
		self.throttle = try container.decodeIfPresent(auditregistration.v1alpha1.WebhookThrottleConfig.self, forKey: .throttle)
	}

	public func encode(to encoder: Encoder) throws {
		var container = encoder.container(keyedBy: CodingKeys.self)

		try container.encode(self.clientConfig, forKey: .clientConfig)
		try container.encode(self.throttle, forKey: .throttle)
	}

}

