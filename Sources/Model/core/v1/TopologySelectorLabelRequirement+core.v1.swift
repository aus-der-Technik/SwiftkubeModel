//
// Copyright 2020 Iskandar Abudiab (iabudiab.dev)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.18.13
/// core.v1.TopologySelectorLabelRequirement
///

import Foundation

public extension core.v1 {

	///
	/// A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
	///
	struct TopologySelectorLabelRequirement: KubernetesResource {
		///
		/// The label key that the selector applies to.
		///
		public var key: String
		///
		/// An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
		///
		public var values: [String]
		///
		/// Default memberwise initializer
		///
		public init(
			key: String,
			values: [String]
		) {
			self.key = key
			self.values = values
		}
	}
}

///
/// Codable conformance
///
extension core.v1.TopologySelectorLabelRequirement {

	private enum CodingKeys: String, CodingKey {

		case key = "key"
		case values = "values"
	}

	public init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.key = try container.decode(String.self, forKey: .key)
		self.values = try container.decode([String].self, forKey: .values)
	}

	public func encode(to encoder: Encoder) throws {
		var container = encoder.container(keyedBy: CodingKeys.self)

		try container.encode(self.key, forKey: .key)
		try container.encode(self.values, forKey: .values)
	}

}

