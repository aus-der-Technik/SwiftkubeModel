//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.18.13
/// core.v1.GlusterfsVolumeSource
///

import Foundation

public extension core.v1 {

	///
	/// Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
	///
	struct GlusterfsVolumeSource: KubernetesResource {
		///
		/// EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
		///
		public var endpoints: String
		///
		/// Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
		///
		public var path: String
		///
		/// ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
		///
		public var readOnly: Bool?
		///
		/// Default memberwise initializer
		///
		public init(
			endpoints: String,
			path: String,
			readOnly: Bool? = nil
		) {
			self.endpoints = endpoints
			self.path = path
			self.readOnly = readOnly
		}
	}
}

///
/// Codable conformance
///
extension core.v1.GlusterfsVolumeSource {

	private enum CodingKeys: String, CodingKey {

		case endpoints = "endpoints"
		case path = "path"
		case readOnly = "readOnly"
	}

	public init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.endpoints = try container.decode(String.self, forKey: .endpoints)
		self.path = try container.decode(String.self, forKey: .path)
		self.readOnly = try container.decodeIfPresent(Bool.self, forKey: .readOnly)
	}

	public func encode(to encoder: Encoder) throws {
		var container = encoder.container(keyedBy: CodingKeys.self)

		try container.encode(self.endpoints, forKey: .endpoints)
		try container.encode(self.path, forKey: .path)
		try container.encode(self.readOnly, forKey: .readOnly)
	}

}

