//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.18.13
/// authorization.v1beta1.SubjectRulesReviewStatus
///

import Foundation

public extension authorization.v1beta1 {

	///
	/// SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
	///
	struct SubjectRulesReviewStatus: KubernetesResource {
		///
		/// EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
		///
		public var evaluationError: String?
		///
		/// Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
		///
		public var incomplete: Bool
		///
		/// NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
		///
		public var nonResourceRules: [authorization.v1beta1.NonResourceRule]
		///
		/// ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
		///
		public var resourceRules: [authorization.v1beta1.ResourceRule]
		///
		/// Default memberwise initializer
		///
		public init(
			evaluationError: String? = nil,
			incomplete: Bool,
			nonResourceRules: [authorization.v1beta1.NonResourceRule],
			resourceRules: [authorization.v1beta1.ResourceRule]
		) {
			self.evaluationError = evaluationError
			self.incomplete = incomplete
			self.nonResourceRules = nonResourceRules
			self.resourceRules = resourceRules
		}
	}
}

///
/// Codable conformance
///
extension authorization.v1beta1.SubjectRulesReviewStatus {

	private enum CodingKeys: String, CodingKey {

		case evaluationError = "evaluationError"
		case incomplete = "incomplete"
		case nonResourceRules = "nonResourceRules"
		case resourceRules = "resourceRules"
	}

	public init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.evaluationError = try container.decodeIfPresent(String.self, forKey: .evaluationError)
		self.incomplete = try container.decode(Bool.self, forKey: .incomplete)
		self.nonResourceRules = try container.decode([authorization.v1beta1.NonResourceRule].self, forKey: .nonResourceRules)
		self.resourceRules = try container.decode([authorization.v1beta1.ResourceRule].self, forKey: .resourceRules)
	}

	public func encode(to encoder: Encoder) throws {
		var container = encoder.container(keyedBy: CodingKeys.self)

		try container.encode(self.evaluationError, forKey: .evaluationError)
		try container.encode(self.incomplete, forKey: .incomplete)
		try container.encode(self.nonResourceRules, forKey: .nonResourceRules)
		try container.encode(self.resourceRules, forKey: .resourceRules)
	}

}

