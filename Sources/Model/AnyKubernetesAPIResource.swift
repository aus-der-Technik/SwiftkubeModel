//
// Copyright 2020 Iskandar Abudiab (iabudiab.dev)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.18.9
///

import Foundation

public struct AnyKubernetesAPIResource: KubernetesAPIResource {

	private enum CodingKeys: String, CodingKey {
		case apiVersion
		case kind
	}

	private let resource: KubernetesAPIResource

	public var apiVersion: String

	public var kind: String

	public var metadata: meta.v1.ObjectMeta?

	public init(_ resource: KubernetesAPIResource) {
		self.resource = resource
		self.apiVersion = resource.apiVersion
		self.kind = resource.kind
		self.metadata = resource.metadata
	}

	public init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)

		let decodedAPIVersion: String?
		if container.contains(.apiVersion) {
			decodedAPIVersion = try container.decode(String.self, forKey: .apiVersion)
		} else {
			decodedAPIVersion = decoder.userInfo[CodingUserInfoKey.apiVersion] as? String
		}

		let decodedKind: String?
		if container.contains(.kind) {
			decodedKind = try container.decode(String.self, forKey: .kind)
		} else {
			decodedKind = decoder.userInfo[CodingUserInfoKey.kind] as? String
		}

		guard let apiVersionString = decodedAPIVersion, let kindString = decodedKind else {
			throw SwiftkubeModelError.decodingError("Couldn't decode apiVersion and/or kind at: \(container.codingPath)")
		}

		let gvk = GroupVersionKind(rawValue: "\(apiVersionString)/\(kindString)")

		let decoded: KubernetesAPIResource
		switch gvk {

		case .coreV1Binding:
			decoded = try core.v1.Binding.init(from: decoder)
		case .coreV1Componentstatus:
			decoded = try core.v1.ComponentStatus.init(from: decoder)
		case .coreV1Configmap:
			decoded = try core.v1.ConfigMap.init(from: decoder)
		case .coreV1Endpoints:
			decoded = try core.v1.Endpoints.init(from: decoder)
		case .coreV1Event:
			decoded = try core.v1.Event.init(from: decoder)
		case .coreV1Limitrange:
			decoded = try core.v1.LimitRange.init(from: decoder)
		case .coreV1Namespace:
			decoded = try core.v1.Namespace.init(from: decoder)
		case .coreV1Node:
			decoded = try core.v1.Node.init(from: decoder)
		case .coreV1Persistentvolume:
			decoded = try core.v1.PersistentVolume.init(from: decoder)
		case .coreV1Persistentvolumeclaim:
			decoded = try core.v1.PersistentVolumeClaim.init(from: decoder)
		case .coreV1Pod:
			decoded = try core.v1.Pod.init(from: decoder)
		case .coreV1Podtemplate:
			decoded = try core.v1.PodTemplate.init(from: decoder)
		case .coreV1Replicationcontroller:
			decoded = try core.v1.ReplicationController.init(from: decoder)
		case .coreV1Resourcequota:
			decoded = try core.v1.ResourceQuota.init(from: decoder)
		case .coreV1Secret:
			decoded = try core.v1.Secret.init(from: decoder)
		case .coreV1Service:
			decoded = try core.v1.Service.init(from: decoder)
		case .coreV1Serviceaccount:
			decoded = try core.v1.ServiceAccount.init(from: decoder)
		case .admissionregistrationV1Mutatingwebhookconfiguration:
			decoded = try admissionregistration.v1.MutatingWebhookConfiguration.init(from: decoder)
		case .admissionregistrationV1Validatingwebhookconfiguration:
			decoded = try admissionregistration.v1.ValidatingWebhookConfiguration.init(from: decoder)
		case .admissionregistrationV1Beta1Mutatingwebhookconfiguration:
			decoded = try admissionregistration.v1beta1.MutatingWebhookConfiguration.init(from: decoder)
		case .admissionregistrationV1Beta1Validatingwebhookconfiguration:
			decoded = try admissionregistration.v1beta1.ValidatingWebhookConfiguration.init(from: decoder)
		case .apiextensionsV1Customresourcedefinition:
			decoded = try apiextensions.v1.CustomResourceDefinition.init(from: decoder)
		case .apiextensionsV1Beta1Customresourcedefinition:
			decoded = try apiextensions.v1beta1.CustomResourceDefinition.init(from: decoder)
		case .apiregistrationV1Apiservice:
			decoded = try apiregistration.v1.APIService.init(from: decoder)
		case .apiregistrationV1Beta1Apiservice:
			decoded = try apiregistration.v1beta1.APIService.init(from: decoder)
		case .appsV1Controllerrevision:
			decoded = try apps.v1.ControllerRevision.init(from: decoder)
		case .appsV1Daemonset:
			decoded = try apps.v1.DaemonSet.init(from: decoder)
		case .appsV1Deployment:
			decoded = try apps.v1.Deployment.init(from: decoder)
		case .appsV1Replicaset:
			decoded = try apps.v1.ReplicaSet.init(from: decoder)
		case .appsV1Statefulset:
			decoded = try apps.v1.StatefulSet.init(from: decoder)
		case .auditregistrationV1Alpha1Auditsink:
			decoded = try auditregistration.v1alpha1.AuditSink.init(from: decoder)
		case .authenticationV1Tokenrequest:
			decoded = try authentication.v1.TokenRequest.init(from: decoder)
		case .authenticationV1Tokenreview:
			decoded = try authentication.v1.TokenReview.init(from: decoder)
		case .authenticationV1Beta1Tokenreview:
			decoded = try authentication.v1beta1.TokenReview.init(from: decoder)
		case .authorizationV1Localsubjectaccessreview:
			decoded = try authorization.v1.LocalSubjectAccessReview.init(from: decoder)
		case .authorizationV1Selfsubjectaccessreview:
			decoded = try authorization.v1.SelfSubjectAccessReview.init(from: decoder)
		case .authorizationV1Selfsubjectrulesreview:
			decoded = try authorization.v1.SelfSubjectRulesReview.init(from: decoder)
		case .authorizationV1Subjectaccessreview:
			decoded = try authorization.v1.SubjectAccessReview.init(from: decoder)
		case .authorizationV1Beta1Localsubjectaccessreview:
			decoded = try authorization.v1beta1.LocalSubjectAccessReview.init(from: decoder)
		case .authorizationV1Beta1Selfsubjectaccessreview:
			decoded = try authorization.v1beta1.SelfSubjectAccessReview.init(from: decoder)
		case .authorizationV1Beta1Selfsubjectrulesreview:
			decoded = try authorization.v1beta1.SelfSubjectRulesReview.init(from: decoder)
		case .authorizationV1Beta1Subjectaccessreview:
			decoded = try authorization.v1beta1.SubjectAccessReview.init(from: decoder)
		case .autoscalingV1Horizontalpodautoscaler:
			decoded = try autoscaling.v1.HorizontalPodAutoscaler.init(from: decoder)
		case .autoscalingV1Scale:
			decoded = try autoscaling.v1.Scale.init(from: decoder)
		case .autoscalingV2Beta2Horizontalpodautoscaler:
			decoded = try autoscaling.v2beta2.HorizontalPodAutoscaler.init(from: decoder)
		case .autoscalingV2Beta1Horizontalpodautoscaler:
			decoded = try autoscaling.v2beta1.HorizontalPodAutoscaler.init(from: decoder)
		case .batchV1Job:
			decoded = try batch.v1.Job.init(from: decoder)
		case .batchV1Beta1Cronjob:
			decoded = try batch.v1beta1.CronJob.init(from: decoder)
		case .batchV2Alpha1Cronjob:
			decoded = try batch.v2alpha1.CronJob.init(from: decoder)
		case .certificatesV1Beta1Certificatesigningrequest:
			decoded = try certificates.v1beta1.CertificateSigningRequest.init(from: decoder)
		case .coordinationV1Lease:
			decoded = try coordination.v1.Lease.init(from: decoder)
		case .coordinationV1Beta1Lease:
			decoded = try coordination.v1beta1.Lease.init(from: decoder)
		case .discoveryV1Beta1Endpointslice:
			decoded = try discovery.v1beta1.EndpointSlice.init(from: decoder)
		case .eventsV1Beta1Event:
			decoded = try events.v1beta1.Event.init(from: decoder)
		case .extensionsV1Beta1Ingress:
			decoded = try extensions.v1beta1.Ingress.init(from: decoder)
		case .flowcontrolV1Alpha1Flowschema:
			decoded = try flowcontrol.v1alpha1.FlowSchema.init(from: decoder)
		case .flowcontrolV1Alpha1Prioritylevelconfiguration:
			decoded = try flowcontrol.v1alpha1.PriorityLevelConfiguration.init(from: decoder)
		case .networkingV1Networkpolicy:
			decoded = try networking.v1.NetworkPolicy.init(from: decoder)
		case .networkingV1Beta1Ingress:
			decoded = try networking.v1beta1.Ingress.init(from: decoder)
		case .networkingV1Beta1Ingressclass:
			decoded = try networking.v1beta1.IngressClass.init(from: decoder)
		case .nodeV1Beta1Runtimeclass:
			decoded = try node.v1beta1.RuntimeClass.init(from: decoder)
		case .nodeV1Alpha1Runtimeclass:
			decoded = try node.v1alpha1.RuntimeClass.init(from: decoder)
		case .policyV1Beta1Eviction:
			decoded = try policy.v1beta1.Eviction.init(from: decoder)
		case .policyV1Beta1Poddisruptionbudget:
			decoded = try policy.v1beta1.PodDisruptionBudget.init(from: decoder)
		case .policyV1Beta1Podsecuritypolicy:
			decoded = try policy.v1beta1.PodSecurityPolicy.init(from: decoder)
		case .rbacV1Clusterrole:
			decoded = try rbac.v1.ClusterRole.init(from: decoder)
		case .rbacV1Clusterrolebinding:
			decoded = try rbac.v1.ClusterRoleBinding.init(from: decoder)
		case .rbacV1Role:
			decoded = try rbac.v1.Role.init(from: decoder)
		case .rbacV1Rolebinding:
			decoded = try rbac.v1.RoleBinding.init(from: decoder)
		case .rbacV1Beta1Clusterrole:
			decoded = try rbac.v1beta1.ClusterRole.init(from: decoder)
		case .rbacV1Beta1Clusterrolebinding:
			decoded = try rbac.v1beta1.ClusterRoleBinding.init(from: decoder)
		case .rbacV1Beta1Role:
			decoded = try rbac.v1beta1.Role.init(from: decoder)
		case .rbacV1Beta1Rolebinding:
			decoded = try rbac.v1beta1.RoleBinding.init(from: decoder)
		case .rbacV1Alpha1Clusterrole:
			decoded = try rbac.v1alpha1.ClusterRole.init(from: decoder)
		case .rbacV1Alpha1Clusterrolebinding:
			decoded = try rbac.v1alpha1.ClusterRoleBinding.init(from: decoder)
		case .rbacV1Alpha1Role:
			decoded = try rbac.v1alpha1.Role.init(from: decoder)
		case .rbacV1Alpha1Rolebinding:
			decoded = try rbac.v1alpha1.RoleBinding.init(from: decoder)
		case .schedulingV1Priorityclass:
			decoded = try scheduling.v1.PriorityClass.init(from: decoder)
		case .schedulingV1Beta1Priorityclass:
			decoded = try scheduling.v1beta1.PriorityClass.init(from: decoder)
		case .schedulingV1Alpha1Priorityclass:
			decoded = try scheduling.v1alpha1.PriorityClass.init(from: decoder)
		case .settingsV1Alpha1Podpreset:
			decoded = try settings.v1alpha1.PodPreset.init(from: decoder)
		case .storageV1Csidriver:
			decoded = try storage.v1.CSIDriver.init(from: decoder)
		case .storageV1Csinode:
			decoded = try storage.v1.CSINode.init(from: decoder)
		case .storageV1Storageclass:
			decoded = try storage.v1.StorageClass.init(from: decoder)
		case .storageV1Volumeattachment:
			decoded = try storage.v1.VolumeAttachment.init(from: decoder)
		case .storageV1Beta1Csidriver:
			decoded = try storage.v1beta1.CSIDriver.init(from: decoder)
		case .storageV1Beta1Csinode:
			decoded = try storage.v1beta1.CSINode.init(from: decoder)
		case .storageV1Beta1Storageclass:
			decoded = try storage.v1beta1.StorageClass.init(from: decoder)
		case .storageV1Beta1Volumeattachment:
			decoded = try storage.v1beta1.VolumeAttachment.init(from: decoder)
		case .storageV1Alpha1Volumeattachment:
			decoded = try storage.v1alpha1.VolumeAttachment.init(from: decoder)
		default:
			let context = DecodingError.Context(
				codingPath: [CodingKeys.apiVersion, CodingKeys.kind],
				debugDescription: "Unknown Kubernetes object gvk: \(String(describing: gvk))"
			)
			throw DecodingError.dataCorrupted(context)
		}

		self.init(decoded)
	}

	public func encode(to encoder: Encoder) throws {
		try resource.encode(to: encoder)
	}
}
