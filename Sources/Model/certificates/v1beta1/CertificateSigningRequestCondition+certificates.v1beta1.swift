//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes v1.18.13
/// certificates.v1beta1.CertificateSigningRequestCondition
///

import Foundation

public extension certificates.v1beta1 {

	///
	/// No description
	///
	struct CertificateSigningRequestCondition: KubernetesResource {
		///
		/// timestamp for the last update to this condition
		///
		public var lastUpdateTime: Date?
		///
		/// human readable message with details about the request state
		///
		public var message: String?
		///
		/// brief reason for the request state
		///
		public var reason: String?
		///
		/// request approval state, currently Approved or Denied.
		///
		public var type: String
		///
		/// Default memberwise initializer
		///
		public init(
			lastUpdateTime: Date? = nil,
			message: String? = nil,
			reason: String? = nil,
			type: String
		) {
			self.lastUpdateTime = lastUpdateTime
			self.message = message
			self.reason = reason
			self.type = type
		}
	}
}

///
/// Codable conformance
///
extension certificates.v1beta1.CertificateSigningRequestCondition {

	private enum CodingKeys: String, CodingKey {

		case lastUpdateTime = "lastUpdateTime"
		case message = "message"
		case reason = "reason"
		case type = "type"
	}

	public init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		self.lastUpdateTime = try container.decodeIfPresent(Date.self, forKey: .lastUpdateTime)
		self.message = try container.decodeIfPresent(String.self, forKey: .message)
		self.reason = try container.decodeIfPresent(String.self, forKey: .reason)
		self.type = try container.decode(String.self, forKey: .type)
	}

	public func encode(to encoder: Encoder) throws {
		var container = encoder.container(keyedBy: CodingKeys.self)

		try container.encode(self.lastUpdateTime, forKey: .lastUpdateTime)
		try container.encode(self.message, forKey: .message)
		try container.encode(self.reason, forKey: .reason)
		try container.encode(self.type, forKey: .type)
	}

}

